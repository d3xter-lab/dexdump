diff --git a/libdexfile/dex/dex_file.cc b/libdexfile/dex/dex_file.cc
index f30d39f..6b1e27a 100644
--- a/libdexfile/dex/dex_file.cc
+++ b/libdexfile/dex/dex_file.cc
@@ -27,6 +27,9 @@
 #include <ostream>
 #include <sstream>
 #include <type_traits>
+#include <chrono>
+#include <fcntl.h>
+#include <unistd.h>
 
 #include "android-base/stringprintf.h"
 #include "base/hiddenapi_domain.h"
@@ -224,6 +227,40 @@ bool DexFile::Init(std::string* error_msg) {
                               header_->file_size_);
     return false;
   }
+
+  char pkgname[256] = {0};
+  FILE* f = fopen("/proc/self/cmdline", "r");
+  if (f != nullptr) {
+    if (fgets(pkgname, sizeof(pkgname), f) != nullptr) {
+      pkgname[strcspn(pkgname, "\n")] = '\0';  // Remove trailing newline if any
+    }
+    fclose(f);
+
+    std::string trigger_path = "/data/data/";
+    trigger_path += pkgname;
+    trigger_path += "/files/dump.flag";
+
+    if (access(trigger_path.c_str(), F_OK) == 0) {
+      auto now = std::chrono::system_clock::now();
+      auto timestamp = std::chrono::duration_cast<std::chrono::milliseconds>(
+                          now.time_since_epoch()).count();
+
+      std::string out_path = "/data/data/";
+      out_path += pkgname;
+      out_path += "/files/dump_";
+      out_path += std::to_string(getpid()) + "_";
+      out_path += std::to_string(reinterpret_cast<uintptr_t>(this)) + "_";
+      out_path += std::to_string(timestamp) + ".dex";
+
+      int fd = open(out_path.c_str(), O_CREAT | O_WRONLY | O_TRUNC, 0644);
+      if (fd >= 0) {
+        ssize_t unused = write(fd, reinterpret_cast<const uint8_t*>(header_), container_size);
+        (void)unused;  // Suppress unused-result warning
+        close(fd);
+      }
+    }
+  }
+
   return true;
 }
 
